{"version":3,"sources":["App.js","index.js"],"names":["App","showImage","url","Promise","resolve","reject","imageObj","Image","src","onload","onerror","err","loadImageToCanvas","then","loadVideoToCanvas","catch","alert","video","current","button","state","isPlaying","pause","setState","innerText","play","addEventListener","timerCallback","paused","ended","computeFrame","setTimeout","ctx1","canvas1","getContext","isUpdating","drawImage","x","y","width","height","fillStyle","fillRect","xyArray","whArray","React","createRef","ref","this","controls","crossOrigin","className","bounds","size","position","onDragStart","e","d","onDrag","pop","clearRect","deltaX","deltaY","push","onDragStop","onResizeStart","direction","delta","onResize","console","log","offsetWidth","offsetHeight","onResizeStop","enableResizing","Button","id","variant","onClick","Component","ReactDOM","render","document","getElementById"],"mappings":"uQAkBqBA,E,kDACnB,aAAe,IAAD,8BACZ,gBAgBFC,UAAY,YA/Bd,SAA2BC,GACzB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAIC,EAAW,IAAIC,MACnBD,EAASE,IAAMN,EACfI,EAASG,OAAS,WAChBL,EAAQE,IAEVA,EAASI,QAAU,SAAUC,GAC3BN,EAAOM,QA0BTC,CAFY,4DAEWC,MAAK,SAAAP,GAC1B,EAAKQ,uBACJC,OAAM,SAAAJ,GACPK,MAAML,OAvBI,EA2BdG,kBAAoB,WAClB,IAAMG,EAAQ,EAAKA,MAAMC,QACnBC,EAAS,EAAKA,OAAOD,QACtB,EAAKE,MAAMC,WAMdJ,EAAMK,QACN,EAAKC,SAAS,CAAEF,WAAW,IAC3BF,EAAOK,UAAY,iBAPnBP,EAAMQ,OACN,EAAKF,SAAS,CAAEF,WAAW,IAC3BF,EAAOK,UAAY,gBAQrBP,EAAMS,iBAAiB,QAAQ,WAC7B,EAAKC,mBACJ,IA3CS,EA8CdA,cAAgB,WACd,IAAMV,EAAQ,EAAKA,MAAMC,QAErBD,EAAMW,QAAUX,EAAMY,QAG1B,EAAKC,eACLC,YAAW,WACT,EAAKJ,kBACJ,KAvDS,EA0DdG,aAAe,WACb,IAAMb,EAAQ,EAAKA,MAAMC,QAEnBc,EADU,EAAKC,QAAQf,QACRgB,WAAW,MAE3B,EAAKd,MAAMe,aACdH,EAAKI,UAAUnB,EAAO,EAAKG,MAAMiB,EAAG,EAAKjB,MAAMkB,EAAG,EAAKlB,MAAMmB,MAAO,EAAKnB,MAAMoB,QAC/ER,EAAKS,UAAY,eACjBT,EAAKU,SAAS,EAAKtB,MAAMiB,EAAG,EAAKjB,MAAMkB,EAAI,EAAKlB,MAAMoB,OAAQ,EAAKpB,MAAMmB,MAAO,KAhElF,EAAKnB,MAAQ,CACXiB,EAAG,IACHC,EAAG,IACHC,MAAO,IACPC,OAAQ,IACRG,QAAS,CAAC,IAAK,KACfC,QAAS,CAAC,IAAK,KACfT,YAAY,EACZd,WAAW,GAEb,EAAKY,QAAUY,IAAMC,YACrB,EAAK7B,MAAQ4B,IAAMC,YACnB,EAAK3B,OAAS0B,IAAMC,YAdR,E,0CAuEd,WAAU,IAAD,OACP,OACE,gCACE,uBAAOC,IAAKC,KAAK/B,MAAOT,IAAI,0EAA0EyC,UAAU,EAAMC,YAAY,cAClI,sBAAKC,UAAU,UAAf,UACE,wBAAQJ,IAAKC,KAAKf,QAASM,MAAM,QAAQC,OAAO,UAChD,cAAC,IAAD,CAEEY,OAAO,SACPC,KAAM,CAAEd,MAAOS,KAAK5B,MAAMmB,MAAOC,OAAQQ,KAAK5B,MAAMoB,QACpDc,SAAU,CAAEjB,EAAGW,KAAK5B,MAAMiB,EAAGC,EAAGU,KAAK5B,MAAMkB,GAE3CiB,YAAa,SAACC,EAAGC,GACf,EAAKlC,SAAS,CAAEY,YAAY,KAE9BuB,OAAQ,SAACF,EAAGC,GACV,IACMzB,EADU,EAAKC,QAAQf,QACRgB,WAAW,MAC1BjB,EAAQ,EAAKA,MAAMC,QACnBoB,EAAI,EAAKlB,MAAMuB,QAAQgB,MACvBtB,EAAI,EAAKjB,MAAMuB,QAAQgB,MAC7B3B,EAAK4B,UAAUvB,EAAGC,EAAG,EAAKlB,MAAMmB,MAAO,EAAKnB,MAAMoB,OAAS,GAC3DR,EAAKI,UAAUnB,EAAOoB,EAAIoB,EAAEI,OAAQvB,EAAImB,EAAEK,OAAQ,EAAK1C,MAAMmB,MAAO,EAAKnB,MAAMoB,QAC/ER,EAAKS,UAAY,eACjBT,EAAKU,SAASL,EAAIoB,EAAEI,OAAQvB,EAAImB,EAAEK,OAAS,EAAK1C,MAAMoB,OAAQ,EAAKpB,MAAMmB,MAAO,GAChF,EAAKnB,MAAMuB,QAAQoB,KAAK1B,EAAIoB,EAAEI,OAAQvB,EAAImB,EAAEK,SAE9CE,WAAY,SAACR,EAAGC,GACd,EAAKlC,SAAS,CAAEc,EAAGoB,EAAEpB,EAAGC,EAAGmB,EAAEnB,EAAGH,YAAY,IAC5C,EAAKL,gBAGPmC,cAAe,SAACT,EAAGU,EAAWnB,EAAKoB,EAAOb,GACxC,EAAK/B,SAAS,CAAEY,YAAY,KAE9BiC,SAAU,SAACZ,EAAGU,EAAWnB,EAAKoB,EAAOb,GACnCe,QAAQC,IAAIH,EAAOb,GACnB,IACMtB,EADU,EAAKC,QAAQf,QACRgB,WAAW,MAC1BjB,EAAQ,EAAKA,MAAMC,QACnBsB,EAAS,EAAKpB,MAAMwB,QAAQe,MAC5BpB,EAAQ,EAAKnB,MAAMwB,QAAQe,MAC3BrB,EAAI,EAAKlB,MAAMuB,QAAQgB,MACvBtB,EAAI,EAAKjB,MAAMuB,QAAQgB,MAC7B3B,EAAK4B,UAAUvB,EAAGC,EAAGC,EAAOC,EAAS,GACrCR,EAAKI,UAAUnB,EAAOqC,EAASjB,EAAGiB,EAAShB,EAAGS,EAAIwB,YAAaxB,EAAIyB,cACnExC,EAAKS,UAAY,eACjBT,EAAKU,SAASY,EAASjB,EAAGiB,EAAShB,EAAIS,EAAIyB,aAAczB,EAAIwB,YAAa,GAC1E,EAAKnD,MAAMuB,QAAQoB,KAAKT,EAASjB,EAAGiB,EAAShB,GAC7C,EAAKlB,MAAMwB,QAAQmB,KAAKhB,EAAIwB,YAAaxB,EAAIyB,eAE/CC,aAAc,SAACjB,EAAGU,EAAWnB,EAAKoB,EAAOb,GACvC,EAAK/B,SAAS,CACZc,EAAGiB,EAASjB,EACZC,EAAGgB,EAAShB,EACZC,MAAOQ,EAAIwB,YACX/B,OAAQO,EAAIyB,aACZrC,YAAY,IAEd,EAAKL,gBAGP4C,gBAAgB,OAIpB,cAACC,EAAA,EAAD,CAAQ5B,IAAKC,KAAK7B,OAAQyD,GAAG,SAASC,QAAQ,YAAYC,QAAS9B,KAAK/C,UAAxE,iC,GA1IyB8E,aCbjCC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.0972d41c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Button from '@material-ui/core/Button';\nimport { Rnd } from \"react-rnd\"\n\nfunction loadImageToCanvas(url) {\n  return new Promise((resolve, reject) => {\n    let imageObj = new Image()\n    imageObj.src = url\n    imageObj.onload = function () {\n      resolve(imageObj)\n    }\n    imageObj.onerror = function (err) {\n      reject(err)\n    }\n  })\n}\n\nexport default class App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      x: 100,\n      y: 100,\n      width: 200,\n      height: 200,\n      xyArray: [100, 100],\n      whArray: [200, 200],\n      isUpdating: false,\n      isPlaying: false\n    }\n    this.canvas1 = React.createRef()\n    this.video = React.createRef()\n    this.button = React.createRef()\n  }\n\n  showImage = () => {\n    const url = 'https://media-public.canva.cn/k2Xu0/MAEhC6k2Xu0/1/s2.png'\n    //废弃画背景image，改为将image在css中作为背景，但暂时保留此方法\n    loadImageToCanvas(url).then(imageObj => {\n      this.loadVideoToCanvas()\n    }).catch(err => {\n      alert(err)\n    })\n  }\n\n  loadVideoToCanvas = () => {\n    const video = this.video.current\n    const button = this.button.current\n    if (!this.state.isPlaying) {\n      video.play()\n      this.setState({ isPlaying: true })\n      button.innerText = '播放'\n    }\n    else {\n      video.pause()\n      this.setState({ isPlaying: false })\n      button.innerText = '暂停'\n    }\n\n    video.addEventListener('play', () => {\n      this.timerCallback();\n    }, false);\n  }\n\n  timerCallback = () => {\n    const video = this.video.current\n\n    if (video.paused || video.ended) {\n      return;\n    }\n    this.computeFrame();\n    setTimeout(() => {\n      this.timerCallback();\n    }, 0);\n  }\n\n  computeFrame = () => {\n    const video = this.video.current\n    const canvas1 = this.canvas1.current\n    const ctx1 = canvas1.getContext('2d')\n\n    if (!this.state.isUpdating) {\n      ctx1.drawImage(video, this.state.x, this.state.y, this.state.width, this.state.height);\n      ctx1.fillStyle = 'rgb(255,0,0)'\n      ctx1.fillRect(this.state.x, this.state.y + this.state.height, this.state.width, 2)\n    }\n\n  }\n\n  render() {\n    return (\n      <div>\n        <video ref={this.video} src=\"https://mdn.github.io/dom-examples/canvas/chroma-keying/media/video.mp4\" controls={true} crossOrigin=\"anonymous\" />\n        <div className=\"canvas1\">\n          <canvas ref={this.canvas1} width=\"360px\" height=\"640px\"></canvas>\n          <Rnd\n            //style={{ background: \"#f7c744\" }}  //用于测试\n            bounds=\"parent\"\n            size={{ width: this.state.width, height: this.state.height }}\n            position={{ x: this.state.x, y: this.state.y }}\n\n            onDragStart={(e, d) => {\n              this.setState({ isUpdating: true })\n            }}\n            onDrag={(e, d) => {\n              const canvas1 = this.canvas1.current\n              const ctx1 = canvas1.getContext('2d')\n              const video = this.video.current\n              const y = this.state.xyArray.pop()\n              const x = this.state.xyArray.pop()\n              ctx1.clearRect(x, y, this.state.width, this.state.height + 2);\n              ctx1.drawImage(video, x + d.deltaX, y + d.deltaY, this.state.width, this.state.height);\n              ctx1.fillStyle = 'rgb(255,0,0)'\n              ctx1.fillRect(x + d.deltaX, y + d.deltaY + this.state.height, this.state.width, 2)\n              this.state.xyArray.push(x + d.deltaX, y + d.deltaY)\n            }}\n            onDragStop={(e, d) => {\n              this.setState({ x: d.x, y: d.y, isUpdating: false })\n              this.computeFrame()\n            }}\n\n            onResizeStart={(e, direction, ref, delta, position) => {\n              this.setState({ isUpdating: true })\n            }}\n            onResize={(e, direction, ref, delta, position) => {\n              console.log(delta, position)\n              const canvas1 = this.canvas1.current\n              const ctx1 = canvas1.getContext('2d')\n              const video = this.video.current\n              const height = this.state.whArray.pop()\n              const width = this.state.whArray.pop()\n              const y = this.state.xyArray.pop()\n              const x = this.state.xyArray.pop()\n              ctx1.clearRect(x, y, width, height + 2);\n              ctx1.drawImage(video, position.x, position.y, ref.offsetWidth, ref.offsetHeight);\n              ctx1.fillStyle = 'rgb(255,0,0)'\n              ctx1.fillRect(position.x, position.y + ref.offsetHeight, ref.offsetWidth, 2)\n              this.state.xyArray.push(position.x, position.y)\n              this.state.whArray.push(ref.offsetWidth, ref.offsetHeight)\n            }}\n            onResizeStop={(e, direction, ref, delta, position) => {\n              this.setState({\n                x: position.x,\n                y: position.y,\n                width: ref.offsetWidth,\n                height: ref.offsetHeight,\n                isUpdating: false\n              });\n              this.computeFrame()\n            }}\n\n            enableResizing={true}\n          >\n          </Rnd>\n        </div>\n        <Button ref={this.button} id=\"button\" variant=\"contained\" onClick={this.showImage}>开始</Button>\n      </div>\n    )\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}